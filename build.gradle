plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.springframework.boot' version '3.3.2'
  id 'org.owasp.dependencycheck' version '9.0.8'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'uk.gov.hmcts.dts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'fact-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

task functional(type: Test) {

  doFirst() {
    if (System.getenv("TEST_URL") == null) {
      println("Loading secrets and admin credentials from vault")

      systemProperty 'OAUTH_SECRET', getVaultSecret('oauth-client-secret')
      systemProperty 'OAUTH_USER', getVaultSecret('oauth-user')
      systemProperty 'OAUTH_USER_PASSWORD', getVaultSecret('oauth-user-password')
      systemProperty 'OAUTH_SUPER_USER', getVaultSecret('oauth-super-user')
    }
  }

  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.9'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation.set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "fact :: api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:fact-api"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url 'https://jitpack.io'
  }
}

def versions = [
  junit           : '5.10.3',
  junitPlatform   : '1.10.3',
  reformLogging   : '5.1.7',
  springBoot      : springBoot.class.package.implementationVersion
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.1.3'
  implementation group: 'org.reactivestreams', name: 'reactive-streams', version: '1.0.4'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.flywaydb', name: 'flyway-core'

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.2.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.23.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.23.1'

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: '20240325.1'
  implementation group: 'com.google.guava', name: 'guava', version: '33.2.1-jre'

  implementation group: 'org.projectlombok', name: 'lombok'

  annotationProcessor 'org.projectlombok:lombok'

  implementation group: 'io.github.resilience4j', name: 'resilience4j-spring-boot3', version: '2.2.0'

  testImplementation 'com.github.hmcts:fortify-client:1.4.3:all'
  testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.3.1'
  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.20.1'
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.20.1'
  integrationTestImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'


  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  functionalTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.20.1'
  functionalTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.20.1'

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured'
}

mainClassName = 'uk.gov.hmcts.dts.fact.Application'

bootJar {
  getArchiveFileName().set(provider {
    'fact-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

import org.flywaydb.gradle.task.FlywayMigrateTask

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}
